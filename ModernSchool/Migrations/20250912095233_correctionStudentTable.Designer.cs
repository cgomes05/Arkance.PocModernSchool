// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ModernSchool.DataAcces;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ModernSchool.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250912095233_correctionStudentTable")]
    partial class correctionStudentTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ModernSchool.Models.Classe", b =>
                {
                    b.Property<int>("ClassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassId"));

                    b.Property<DateTime>("DatCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DteUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NomNiveau")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<int>("ProfPrincipalId")
                        .HasColumnType("integer");

                    b.HasKey("ClassId");

                    b.HasIndex("ProfPrincipalId");

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("ModernSchool.Models.Enseigne", b =>
                {
                    b.Property<int>("ProfId")
                        .HasColumnType("integer");

                    b.Property<int>("MatiereId")
                        .HasColumnType("integer");

                    b.HasKey("ProfId", "MatiereId");

                    b.HasIndex("MatiereId");

                    b.ToTable("Enseigne");
                });

            modelBuilder.Entity("ModernSchool.Models.Matiere", b =>
                {
                    b.Property<int>("MatiereId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MatiereId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("MatiereId");

                    b.ToTable("Matiere");
                });

            modelBuilder.Entity("ModernSchool.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("NoteId"));

                    b.Property<DateTime>("DateNote")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MatiereId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Valeur")
                        .HasColumnType("numeric");

                    b.HasKey("NoteId");

                    b.HasIndex("MatiereId");

                    b.HasIndex("StudentId");

                    b.ToTable("CK_Note_Valeur", "[Valeur] >= 0 AND [Valeur] <= 20");
                });

            modelBuilder.Entity("ModernSchool.Models.Professeur", b =>
                {
                    b.Property<int>("ProfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfId"));

                    b.Property<char>("Genre")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProfId");

                    b.ToTable("Prof");
                });

            modelBuilder.Entity("ModernSchool.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<int>("ClasseClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClasseClassId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ModernSchool.Models.Classe", b =>
                {
                    b.HasOne("ModernSchool.Models.Professeur", "ProfPrincipal")
                        .WithMany("ClassesPrincipales")
                        .HasForeignKey("ProfPrincipalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProfPrincipal");
                });

            modelBuilder.Entity("ModernSchool.Models.Enseigne", b =>
                {
                    b.HasOne("ModernSchool.Models.Matiere", "Matiere")
                        .WithMany("Enseignes")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernSchool.Models.Professeur", "Professeur")
                        .WithMany("Enseignes")
                        .HasForeignKey("ProfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("ModernSchool.Models.Note", b =>
                {
                    b.HasOne("ModernSchool.Models.Matiere", "Matiere")
                        .WithMany("Notes")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ModernSchool.Models.Student", "Student")
                        .WithMany("Notes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matiere");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ModernSchool.Models.Student", b =>
                {
                    b.HasOne("ModernSchool.Models.Classe", "Classe")
                        .WithMany("Students")
                        .HasForeignKey("ClasseClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("ModernSchool.Models.Classe", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ModernSchool.Models.Matiere", b =>
                {
                    b.Navigation("Enseignes");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("ModernSchool.Models.Professeur", b =>
                {
                    b.Navigation("ClassesPrincipales");

                    b.Navigation("Enseignes");
                });

            modelBuilder.Entity("ModernSchool.Models.Student", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
